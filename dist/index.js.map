{"version":3,"sources":["../utils/clondeDeep.js","exchanger.js","index.js"],"names":["deepClone","source","Object","Date","String","target","Array","prop","hasOwnProperty","Exchanger","dataToExchanger","toData","schema","data","entries","forEach","shemaKey","schemaProp","undefined","key","Error","type","validatePropType","isArray","map","d","fromJson","exchanger","exchangerToExchangerFactory","targetExchanger","sourceExchanger","targetSchema","constructor","targetData","_data","sourcedata","targetSchameKey","targetSchemaProp","sourceValue","fromExchanger","length","initialData","_initailData","r","currValue","toJSON"],"mappings":"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","file":"index.js","sourceRoot":"..\\src\\exchanger","sourcesContent":["/**\r\n * @link https://gist.github.com/cassaram09/e6eb7b289f97128e4e45f0d720475c12\r\n * @param {*} source\r\n */\r\nfunction deepClone(source) {\r\n  // If the source isn't an Object or Array, throw an error.\r\n  if (\r\n    !(source instanceof Object) ||\r\n    source instanceof Date ||\r\n    source instanceof String\r\n  ) {\r\n    throw \"Only Objects or Arrays are supported.\"\r\n  }\r\n\r\n  // Set the target data type before copying.\r\n  var target = source instanceof Array ? [] : {}\r\n\r\n  for (let prop in source) {\r\n    // Make sure the property isn't on the protoype\r\n    if (\r\n      source instanceof Object &&\r\n      !(source instanceof Array) &&\r\n      !source.hasOwnProperty(prop)\r\n    ) {\r\n      continue\r\n    }\r\n\r\n    // If the current property is an Array or Object, recursively clone it, else copy it's value\r\n    if (\r\n      source[prop] instanceof Object &&\r\n      !(source[prop] instanceof Date) &&\r\n      !(source[prop] instanceof String)\r\n    ) {\r\n      target[prop] = deepClone(source[prop])\r\n    } else {\r\n      target[prop] = source[prop]\r\n    }\r\n  }\r\n\r\n  return target\r\n}\r\n\r\nexport default deepClone\r\n","import cloneDeep from \"../utils/clondeDeep\"\r\n\r\n/**\r\n * Copy initailJson data to exchanger schema\r\n * @param {*} toData\r\n * @param {Object<string, SchemaProp>} schema\r\n * @param {*} data\r\n */\r\nfunction dataToExchanger(toData, schema, data) {\r\n  Object.entries(schema).forEach(([shemaKey, schemaProp]) => {\r\n    if (schemaProp.key === undefined) {\r\n      throw new Error(\"Schema prop must contains key prop\")\r\n    }\r\n    toData[shemaKey] = data[schemaProp.key]\r\n\r\n    if (schemaProp.type) {\r\n      validatePropType(schemaProp)\r\n\r\n      if (Array.isArray(schemaProp.type)) {\r\n        toData[shemaKey] = toData[shemaKey].map(d =>\r\n          schemaProp.type[0].fromJson(d)\r\n        )\r\n      } else {\r\n        const exchanger = schemaProp.type.fromJson(toData[shemaKey])\r\n        toData[shemaKey] = exchanger\r\n      }\r\n    }\r\n  })\r\n}\r\n\r\n/**\r\n *\r\n * @param {Exchanger} targetExchanger\r\n * @param {Exchanger} sourceExchanger\r\n */\r\nfunction exchangerToExchangerFactory(targetExchanger, sourceExchanger) {\r\n  const targetSchema = targetExchanger.constructor.schema\r\n\r\n  const targetData = targetExchanger._data\r\n  const sourcedata = sourceExchanger._data\r\n\r\n  Object.entries(targetSchema).forEach(\r\n    ([targetSchameKey, targetSchemaProp]) => {\r\n      const sourceValue = sourcedata[targetSchameKey]\r\n\r\n      targetData[targetSchameKey] = sourceValue\r\n\r\n      if (targetSchemaProp.type) {\r\n        validatePropType(targetSchemaProp)\r\n\r\n        if (Array.isArray(targetSchemaProp.type)) {\r\n          const type = targetSchemaProp.type[0]\r\n          targetData[targetSchameKey] = targetData[targetSchameKey].map(d => {\r\n            return type.fromExchanger(d)\r\n          })\r\n        } else {\r\n          targetData[targetSchameKey] = targetSchemaProp.type.fromExchanger(\r\n            targetData[targetSchameKey]\r\n          )\r\n        }\r\n      }\r\n    }\r\n  )\r\n}\r\n\r\nfunction validatePropType(prop) {\r\n  const { type } = prop\r\n  if (Array.isArray(type)) {\r\n    if (prop.type.length !== 1) {\r\n      throw new Error(\"Array type must contains only one item\")\r\n    }\r\n    if (!(new type[0]() instanceof Exchanger)) {\r\n      throw new Error(\"Type is not instance of Exchager\")\r\n    }\r\n  } else {\r\n    if (!(new type() instanceof Exchanger)) {\r\n      throw new Error(`Type is not instance of Exchager`)\r\n    }\r\n  }\r\n}\r\n\r\n/**\r\n * @typedef {Object} SchemaProp\r\n * @property {String} key - out keys\r\n * @property {?String|Exchanger|Array<Exchanger>} type - data type\r\n * @property {Object<string, SchemaProp>} childrens\r\n */\r\n\r\nclass Exchanger {\r\n  constructor(initialData) {\r\n    this._data = {}\r\n    this._initailData = initialData\r\n  }\r\n  /**\r\n   * @returns {Object<string, SchemaProp>}\r\n   */\r\n  static get schema() {\r\n    return {}\r\n  }\r\n  static fromJson(initialData) {\r\n    const schema = this.schema\r\n    const data = cloneDeep(initialData)\r\n    const exchanger = new this(data)\r\n\r\n    dataToExchanger(exchanger._data, schema, data)\r\n\r\n    return exchanger\r\n  }\r\n  /**\r\n   * @todo make cool\r\n   * @param {*} sourceExchanger\r\n   */\r\n  static fromExchanger(sourceExchanger) {\r\n    const exchanger = new this(sourceExchanger)\r\n\r\n    exchangerToExchangerFactory(exchanger, sourceExchanger)\r\n\r\n    return exchanger\r\n  }\r\n  /**\r\n   *\r\n   */\r\n  toJSON() {\r\n    const schema = this.constructor.schema\r\n    let r = {}\r\n    Object.entries(schema).forEach(([shemaKey, schemaProp]) => {\r\n      const currValue = this._data[shemaKey]\r\n\r\n      if (schemaProp.type) {\r\n        if (Array.isArray(schemaProp.type)) {\r\n          if (schemaProp.type.length !== 1) {\r\n            throw new Error(\"Array type must contains only one item\")\r\n          }\r\n          r[schemaProp.key] = currValue.map(d => d.toJSON())\r\n        } else {\r\n          r[schemaProp.key] = currValue.toJSON()\r\n        }\r\n      } else {\r\n        r[schemaProp.key] = currValue\r\n      }\r\n    })\r\n\r\n    return r\r\n  }\r\n}\r\n\r\nexport default Exchanger\r\n","export { default } from \"./exchanger\"\r\n"]}