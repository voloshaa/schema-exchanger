{"version":3,"sources":["skipFunctions.js","../utils/clondeDeep.js","exchanger.js","index.js"],"names":["force","value","target","skipNull","deepClone","source","Object","Date","String","Array","prop","hasOwnProperty","Exchanger","fetchInitialValue","data","schemaProp","fromKey","default","defaultValue","key","prototype","call","dataToExchanger","toData","schema","entries","forEach","shemaKey","undefined","Error","type","validatePropType","isArray","map","d","fromJson","exchanger","exchangerToExchangerFactory","targetExchanger","sourceExchanger","targetSchema","targetData","_data","sourcedata","targetSchameKey","targetSchemaProp","fromExchanger","length","initialData","_initailData","r","skippers","currValue","some","v","toJSON","constructor"],"mappings":"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","file":"index.js","sourceRoot":"..\\src\\exchanger","sourcesContent":["export function force(value, target) {\r\n  return true\r\n}\r\n\r\nexport function skipNull(value, target) {\r\n  return value === null\r\n}\r\n","/**\r\n * @link https://gist.github.com/cassaram09/e6eb7b289f97128e4e45f0d720475c12\r\n * @param {*} source\r\n */\r\nfunction deepClone(source) {\r\n  // If the source isn't an Object or Array, throw an error.\r\n  if (\r\n    !(source instanceof Object) ||\r\n    source instanceof Date ||\r\n    source instanceof String\r\n  ) {\r\n    throw \"Only Objects or Arrays are supported.\"\r\n  }\r\n\r\n  // Set the target data type before copying.\r\n  var target = source instanceof Array ? [] : {}\r\n\r\n  for (let prop in source) {\r\n    // Make sure the property isn't on the protoype\r\n    if (\r\n      source instanceof Object &&\r\n      !(source instanceof Array) &&\r\n      !source.hasOwnProperty(prop)\r\n    ) {\r\n      continue\r\n    }\r\n\r\n    // If the current property is an Array or Object, recursively clone it, else copy it's value\r\n    if (\r\n      source[prop] instanceof Object &&\r\n      !(source[prop] instanceof Date) &&\r\n      !(source[prop] instanceof String)\r\n    ) {\r\n      target[prop] = deepClone(source[prop])\r\n    } else {\r\n      target[prop] = source[prop]\r\n    }\r\n  }\r\n\r\n  return target\r\n}\r\n\r\nexport default deepClone\r\n","import cloneDeep from \"../utils/clondeDeep\"\r\n\r\n/**\r\n *\r\n * @param {*} data\r\n * @param {SchemaProp} schemaProp\r\n * @param {String} [fromKey]\r\n */\r\nfunction fetchInitialValue(data, schemaProp, fromKey) {\r\n  const { default: defaultValue = null, key } = schemaProp\r\n\r\n  return Object.prototype.hasOwnProperty.call(data, fromKey || key)\r\n    ? data[fromKey || key]\r\n    : defaultValue\r\n}\r\n\r\n/**\r\n * Copy initailJson data to exchanger schema\r\n * @param {*} toData\r\n * @param {Object<string, SchemaProp>} schema\r\n * @param {*} data\r\n */\r\nfunction dataToExchanger(toData, schema, data) {\r\n  Object.entries(schema).forEach(([shemaKey, schemaProp]) => {\r\n    if (schemaProp.key === undefined) {\r\n      throw new Error(\"Schema prop must contains key prop\")\r\n    }\r\n    toData[shemaKey] = fetchInitialValue(data, schemaProp)\r\n\r\n    if (schemaProp.type) {\r\n      validatePropType(schemaProp)\r\n\r\n      if (Array.isArray(schemaProp.type)) {\r\n        toData[shemaKey] = toData[shemaKey].map(d =>\r\n          schemaProp.type[0].fromJson(d)\r\n        )\r\n      } else {\r\n        const exchanger = schemaProp.type.fromJson(toData[shemaKey])\r\n        toData[shemaKey] = exchanger\r\n      }\r\n    }\r\n  })\r\n}\r\n\r\n/**\r\n *\r\n * @param {Exchanger} targetExchanger\r\n * @param {Exchanger} sourceExchanger\r\n */\r\nfunction exchangerToExchangerFactory(targetExchanger, sourceExchanger) {\r\n  const targetSchema = targetExchanger.schema\r\n\r\n  const targetData = targetExchanger._data\r\n  const sourcedata = sourceExchanger._data\r\n\r\n  Object.entries(targetSchema).forEach(\r\n    ([targetSchameKey, targetSchemaProp]) => {\r\n      targetData[targetSchameKey] = fetchInitialValue(\r\n        sourcedata,\r\n        targetSchemaProp,\r\n        targetSchameKey\r\n      )\r\n\r\n      if (targetSchemaProp.type) {\r\n        validatePropType(targetSchemaProp)\r\n\r\n        if (Array.isArray(targetSchemaProp.type)) {\r\n          const type = targetSchemaProp.type[0]\r\n          targetData[targetSchameKey] = targetData[targetSchameKey].map(d => {\r\n            return type.fromExchanger(d)\r\n          })\r\n        } else {\r\n          targetData[targetSchameKey] = targetSchemaProp.type.fromExchanger(\r\n            targetData[targetSchameKey]\r\n          )\r\n        }\r\n      }\r\n    }\r\n  )\r\n}\r\n\r\nfunction validatePropType(prop) {\r\n  const { type } = prop\r\n  if (Array.isArray(type)) {\r\n    if (prop.type.length !== 1) {\r\n      throw new Error(\"Array type must contains only one item\")\r\n    }\r\n    if (!(new type[0]() instanceof Exchanger)) {\r\n      throw new Error(\"Type is not instance of Exchager\")\r\n    }\r\n  } else {\r\n    if (!(new type() instanceof Exchanger)) {\r\n      throw new Error(`Type is not instance of Exchager`)\r\n    }\r\n  }\r\n}\r\n\r\n/**\r\n * @typedef {Function} SkipperFunction\r\n * @function SkipperFunction\r\n * @param {*} value\r\n * @param {Exchanger} target\r\n */\r\n\r\n/**\r\n * @typedef {Object} SchemaProp\r\n * @property {String} key - out keys\r\n * @property {String|Exchanger|Array<Exchanger>} [type] - data type\r\n * @property {*} [default] - value as default\r\n * @property {Object<string, SchemaProp>} [childrens]\r\n * @property {SkipperFunction[]|SkipperFunction} [skippers] - skipper function used when call toJSON\r\n */\r\n\r\nclass Exchanger {\r\n  constructor(initialData) {\r\n    this._data = {}\r\n    this._initailData = initialData\r\n  }\r\n  /**\r\n   * @returns {Object<string, SchemaProp>}\r\n   */\r\n  static get schema() {\r\n    return {}\r\n  }\r\n  /**\r\n   *\r\n   * @param {*} initialData\r\n   * @return {Exchanger}\r\n   */\r\n  static fromJson(initialData) {\r\n    const schema = this.schema\r\n    const data = cloneDeep(initialData)\r\n    const exchanger = new this(data)\r\n\r\n    dataToExchanger(exchanger._data, schema, data)\r\n\r\n    return exchanger\r\n  }\r\n  /**\r\n   * @param {*} sourceExchanger\r\n   * @returns {Exchanger}\r\n   */\r\n  static fromExchanger(sourceExchanger) {\r\n    const exchanger = new this(sourceExchanger)\r\n\r\n    exchangerToExchangerFactory(exchanger, sourceExchanger)\r\n\r\n    return exchanger\r\n  }\r\n  /**\r\n   * @return {*}\r\n   */\r\n  toJSON() {\r\n    const schema = this.schema\r\n    let r = {}\r\n    Object.entries(schema).forEach(([shemaKey, schemaProp]) => {\r\n      let { skippers = [] } = schemaProp\r\n      const currValue = this._data[shemaKey]\r\n\r\n      skippers = Array.isArray(skippers) ? skippers : [skippers]\r\n      if (skippers.some(v => v.call(null, this, currValue))) {\r\n        return\r\n      }\r\n\r\n      if (schemaProp.type) {\r\n        validatePropType(schemaProp)\r\n\r\n        if (Array.isArray(schemaProp.type)) {\r\n          r[schemaProp.key] = currValue.map(d => d.toJSON())\r\n        } else {\r\n          r[schemaProp.key] = currValue.toJSON()\r\n        }\r\n      } else {\r\n        r[schemaProp.key] = currValue\r\n      }\r\n    })\r\n\r\n    return r\r\n  }\r\n  /**\r\n   * @returns {Object<*>}\r\n   */\r\n  get getter() {\r\n    return this._data\r\n  }\r\n\r\n  /**\r\n   * @returns {Object<string, SchemaProp>}\r\n   */\r\n  get schema() {\r\n    return this.constructor.schema\r\n  }\r\n}\r\n\r\nexport default Exchanger\r\n","import * as skippers from \"./skipFunctions\"\r\n\r\nexport { default } from \"./exchanger\"\r\nexport { skippers }\r\n"]}